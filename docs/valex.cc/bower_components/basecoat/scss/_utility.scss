// Margin & Padding spacer utilities

@for $i from 1 through length($spacers) { 
  $size: #{nth($spacers, $i)};
  $scale: #{$i - 1};

    @each $prop, $abbrev in (margin: m, padding: p) {

      .#{$abbrev}-#{$scale}  { #{$prop}: #{$size} !important; }
      .#{$abbrev}t-#{$scale} { #{$prop}-top: #{$size} !important; }
      .#{$abbrev}r-#{$scale} { #{$prop}-right: #{$size} !important; }
      .#{$abbrev}b-#{$scale} { #{$prop}-bottom: #{$size} !important; }
      .#{$abbrev}l-#{$scale} { #{$prop}-left: #{$size} !important; }

      .#{$abbrev}x-#{$scale} {
        #{$prop}-right: #{$size} !important;
        #{$prop}-left: #{$size} !important;
      }

      .#{$abbrev}y-#{$scale} {
        #{$prop}-top: #{$size} !important;
        #{$prop}-bottom: #{$size} !important;
      }

      @each $breakpoint in map-keys($grid-breakpoints) {

        @include breakpoint($breakpoint) {

          .#{$abbrev}-#{$breakpoint}-#{$scale}  { #{$prop}: #{$size} !important; }
          .#{$abbrev}t-#{$breakpoint}-#{$scale} { #{$prop}-top: #{$size} !important; }
          .#{$abbrev}r-#{$breakpoint}-#{$scale} { #{$prop}-right: #{$size} !important; }
          .#{$abbrev}b-#{$breakpoint}-#{$scale} { #{$prop}-bottom: #{$size} !important; }
          .#{$abbrev}l-#{$breakpoint}-#{$scale} { #{$prop}-left: #{$size} !important; }

          .#{$abbrev}x-#{$breakpoint}-#{$scale} {
            #{$prop}-right: #{$size} !important;
            #{$prop}-left: #{$size} !important;
          }

          .#{$abbrev}y-#{$breakpoint}-#{$scale} {
            #{$prop}-top: #{$size} !important;
            #{$prop}-bottom: #{$size} !important;
          }

        }

      }

    }

}

// position utilites
.position-static   { position: static; }
.position-relative { position: relative; }
.position-absolute { position: absolute; }
.position-fixed    { position: fixed; }

.top-0    { top: 0; }
.right-0  { right: 0; }
.bottom-0 { bottom: 0; }
.left-0   { left: 0; }

// Display utilites
.d-block        { display: block; }
.d-inline       { display: inline; }
.d-inline-block { display: inline-block; }
.hidden, // legacy
.d-none         { display: none; }

// Border utilities
.border        { border: 1px $border-color solid !important; }
.border-top    { border-top: 1px $border-color solid !important; }
.border-right  { border-right: 1px $border-color solid !important; }
.border-bottom { border-bottom: 1px $border-color solid !important; }
.border-left   { border-left: 1px $border-color solid !important; }

// Border colors
.border-white { border-color: $border-color-white !important; }

// Without borders
.border-0        { border: 0 !important; }
.border-top-0    { border-top: 0 !important; }
.border-right-0  { border-right: 0 !important; }
.border-bottom-0 { border-bottom: 0 !important; }
.border-left-0   { border-left: 0 !important; }

.round-corners   { border-radius: $border-radius; }
.round-corners-1 { border-radius: $border-radius * 2; }


// Inverse Text-color (for use on dark bgs)

.text-black {color: $heading-color !important;}

.text-default {color: $body-color !important;}

.text-white {
  color: $white !important;
  a {
    color: $white;
    opacity: 0.7;
  }
}

// Background-colors

.bg-white { background: $white;}
.bg-black { background: $black;}
.bg-theme-color { background: $theme-color; }

// Links

.no-underline-hover {
  &:hover {
    text-decoration: none;
  }
}

//
// Visually hidden
//

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  border: 0;

  &.focusable:active,
  &.focusable:focus {
    position: static;
    width: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    clip: auto;
  }
}
