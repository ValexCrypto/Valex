#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const semver = require('semver')
const hubdown = require('hubdown')
const GitHub = require('github')
const github = new GitHub()

github.authenticate({
  type: 'token', 
  token: 'da809a6077bb1b0aa7c5623f7b2d5f1fec2faae4'
})

console.log('Fetching valex/valex releases from the GitHub API')

async function getReleases () {
  const res = await github.repos.getReleases({
    owner: 'valex',
    repo: 'valex',
    per_page: 100
  })

  return Promise.all(res.data
    .filter(release => !(release.draft || release.prerelease))
    .filter(release => semver.valid(release.tag_name.substring(1)))
    .map(processRelease)
  )
}

async function processRelease(release) {
  release.version = release.tag_name.substring(1)

  
  release.body = release.body
  
  // turn PR references like #123 into hyperlinks
  .replace(
    / #(\d+)$/gm,
    ' <a href="https://github.com/valex/valex/pull/$1">#$1</a>'
  )

  // adjust heading levels (h2 becomes h3, etc)
  .replace(/^#### /gm, '##### ')
  .replace(/^### /gm, '#### ')
  .replace(/^## /gm, '### ')

  const parsed = await hubdown(release.body)
  release.body_html = parsed.content
  
  return release
}

getReleases().then(releases => {

  releases = releases
    .sort((a, b) => semver.compare(b.version, a.version))

  console.log(releases.map(release => release.version).join('\n'))

  fs.writeFileSync(
    path.join(__dirname, '../data/releases.json'), 
    JSON.stringify(releases, null, 2)
  )
})

